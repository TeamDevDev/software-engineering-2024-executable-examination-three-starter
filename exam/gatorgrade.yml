setup: |
  echo "🐊 Attempt to install software engineering tools"
  echo "🐊 Will not re-install if already installed"
  poetry install
# The numerical value is a raw percentage that
# represents the goal for claiming attainment
# of the program learning objective across
# all of the students in the course
targets:
  PLO1:
    - R: 80
  PLO2:
    - R: 80

# The numerical value is a raw number of checks
# that sets a >= threshold for the learning level
thresholds:
  # Both PLO1 and PLO2 --> CLO1, CLO2, and CLO4
  SE:
    # PLO1 --> CLO1 (20) + CLO4 (7) = 27 total CLO-based checks
    PLO1:
      - N: 0
      - I: 7
      - D: 14
      - R: 20
      - P: 25
    # PLO2 --> CLO2 (13) = 13 total CLO-based checks
    PLO2:
      - N: 0
      - I: 2
      - D: 6
      - R: 8 
      - P: 12
---

# Learning Outcome Mappings {{{

# SE: 
#   - PLO1:
#      - CLO1:
#        - description: Effectively create a solution to a domain-specific
#          problem delivered as a maintainable software system.
#        - level: D
#      - CLO4:
#        - description: Apply knowledge about the implementation of the Python
#          programming language to create and use software engineering tools
#          that support activities like testing and debugging.
#        - level: D
#   - PLO2:
#      - CLO2:
#         - description: Demonstrate competency in the theories, models,
#           and practices of the project domains that require the
#           engineering of software.
#         - level: D

# }}}

# Honor Code {{{

- ../README.md:
    - description: Ensure that the README.md file exists inside of the root of the GitHub repository
      check: ConfirmFileExists
    - description: Delete the phrase 'Add Your Name Here' and add your own name as an Honor Code pledge in README.md
      check: MatchFileFragment
      options:
        fragment: "Add Your Name Here"
        count: 0
        exact: true
    - description: Complete all TODOs, remove the TODO markers, and rewrite comments for README.md
      check: MatchFileFragment
      options:
        fragment: "TODO"
        count: 0
        exact: true
    - description: Retype the every word in the Honor Code pledge in README.md
      check: MatchFileFragment
      options:
        fragment: "I adhered to the Allegheny College Honor Code while completing this executable examination."
        count: 3
        exact: true
    - description: Indicate that you have completed all of the tasks in the README.md
      check: MatchFileFragment
      options:
        fragment: "- [X]"
        count: 11
        exact: true

# }}}

# Basic Program Characteristics {{{

# Question 1

# perform checks on the program file
- questions/question_one.py:
    # --> file exists in the correct directory
    - description: Ensure that question_one.py file exists in the questions/ directory
      check: ConfirmFileExists
    # --> no remaining TODO markers in the source code
    - description: Complete all TODOs, remove the TODO markers, and rewrite comments for question_one.py
      check: MatchFileFragment
      options:
        fragment: TODO
        count: 0
        exact: true
    # --> contains suitable number of docstrings for both module and the function (note, differs from symbex)
    - description: Create a sufficient number of docstring (i.e., multiple-line) comments in question_one.py
      check: CountMultipleLineComments
      options:
        language: "Python"
        count: 10
        exact: false
    # --> contains suitable number of single-line comments (note, differs from symbex)
    - description: Create a sufficient number of single-line comments in question_one.py
      check: CountSingleLineComments
      options:
        language: "Python"
        count: 20
        exact: false

# perform checks on the test file
- tests/test_question_one.py:
    # --> file exists in the correct directory
    - description: Ensure that test_question_one.py file exists in the tests/ directory
      check: ConfirmFileExists

# Question 2

# perform checks on the program file
- questions/question_two.py:
    # --> file exists in the correct directory
    - description: Ensure that question_two.py file exists in the questions/ directory
      check: ConfirmFileExists
    # --> no remaining TODO markers in the source code
    - description: Complete all TODOs, remove the TODO markers, and rewrite comments for question_two.py
      check: MatchFileFragment
      options:
        fragment: TODO
        count: 0
        exact: true
    # --> contains suitable number of docstrings for both module and the function (note, differs from symbex)
    - description: Create a sufficient number of docstring (i.e., multiple-line) comments in question_two.py
      check: CountMultipleLineComments
      options:
        language: "Python"
        count: 8
        exact: false
    # --> contains suitable number of single-line comments (note, differs from symbex)
    - description: Create a sufficient number of single-line comments in question_two.py
      check: CountSingleLineComments
      options:
        language: "Python"
        count: 20
        exact: false

# perform checks on the test file
- tests/test_question_two.py:
    # --> file exists in the correct directory
    - description: Ensure that test_question_two.py file exists in the tests/ directory
      check: ConfirmFileExists

# Question 3

# perform checks on the program file
- questions/question_three.py:
    # --> file exists in the correct directory
    - description: Ensure that question_three.py file exists in the questions/ directory
      check: ConfirmFileExists
    # --> no remaining TODO markers in the source code
    - description: Complete all TODOs, remove the TODO markers, and rewrite comments for question_three.py
      check: MatchFileFragment
      options:
        fragment: TODO
        count: 0
        exact: true
    # --> contains suitable number of docstrings for both module and the function (note, differs from symbex)
    - description: Create a sufficient number of docstring (i.e., multiple-line) comments in question_three.py
      check: CountMultipleLineComments
      options:
        language: "Python"
        count: 8
        exact: false
    # --> contains suitable number of single-line comments (note, differs from symbex)
    - description: Create a sufficient number of single-line comments in question_three.py
      check: CountSingleLineComments
      options:
        language: "Python"
        count: 20
        exact: false

# perform checks on the test file
- tests/test_question_three.py:
    # --> file exists in the correct directory
    - description: Ensure that test_question_two.py file exists in the tests/ directory
      check: ConfirmFileExists

# Question 4

# perform checks on the program file
- questions/question_four.py:
    # --> file exists in the correct directory
    - description: Ensure that question_four.py file exists in the questions/ directory
      check: ConfirmFileExists
    # --> no remaining TODO markers in the source code
    - description: Complete all TODOs, remove the TODO markers, and rewrite comments for question_four.py
      check: MatchFileFragment
      options:
        fragment: TODO
        count: 0
        exact: true
    # --> contains suitable number of docstrings for both module and the function (note, differs from symbex)
    - description: Create a sufficient number of docstring (i.e., multiple-line) comments in question_four.py
      check: CountMultipleLineComments
      options:
        language: "Python"
        count: 10
        exact: false
    # --> contains suitable number of single-line comments (note, differs from symbex)
    - description: Create a sufficient number of single-line comments in question_four.py
      check: CountSingleLineComments
      options:
        language: "Python"
        count: 20
        exact: false

# perform checks on the test file
- tests/test_question_four.py:
    # --> file exists in the correct directory
    - description: Ensure that test_question_four.py file exists in the tests/ directory
      check: ConfirmFileExists


# }}}

# Software Testing with ExecExam for Executable Examinations {{{

# Question 1

- description: Run checks for Question 1 Part (a) with 'execexam' command and confirm correct exit code
  command: poetry run execexam . tests/ --mark "question_one_part_a" --no-fancy --report status --report trace --report failure --report setup --report code
  objectives:
    CLO4:
      degree:
        - SE: "D"
          rationale: "Automatically analyze test coverage reports through set-theoretic approaches."

- description: Run checks for Question 1 Part (b) with 'execexam' command and confirm correct exit code
  command: poetry run execexam . tests/ --mark "question_one_part_b" --no-fancy --report status --report trace --report failure --report setup --report code
  objectives:
    CLO4:
      degree:
        - SE: "D"
          rationale: "Calculate the code coverage score for a test suite."

- description: Run checks for Question 1 Part (c) with 'execexam' command and confirm correct exit code
  command: poetry run execexam . tests/ --mark "question_one_part_c" --no-fancy --report status --report trace --report failure --report setup --report code
  objectives:
    CLO4:
      degree:
        - SE: "D"
          rationale: "Calculate the mutation score for a test suite."

- description: Run checks for Question 1 Part (d) with 'execexam' command and confirm correct exit code
  command: poetry run execexam . tests/ --mark "question_one_part_d" --no-fancy --report status --report trace --report failure --report setup --report code
  objectives:
    CLO2:
      degree:
        - SE: "D"
          rationale: "Calculate a mutation score when the project domain allows for equivalent mutants."

# Question 2

- description: Run checks for Question 2 Part (a) with 'execexam' command and confirm correct exit code
  command: poetry run execexam . tests/ --mark "question_two_part_a" --no-fancy --report status --report trace --report failure --report setup --report code
  objectives:
    CLO1:
      degree:
        - SE: "D"
          rationale: "Ensure that a software system is maintainable by implementing an automated linter."

- description: Run checks for Question 2 Part (b) with 'execexam' command and confirm correct exit code
  command: poetry run execexam . tests/ --mark "question_two_part_b" --no-fancy --report status --report trace --report failure --report setup --report code
  objectives:
    CLO4:
      degree:
        - SE: "D"
          rationale: "Implement an automated analysis of a Python program's abstract syntax tree."

- description: Run checks for Question 2 Part (c) with 'execexam' command and confirm correct exit code
  command: poetry run execexam . tests/ --mark "question_two_part_c" --no-fancy --report status --report trace --report failure --report setup --report code
  objectives:
    CLO1:
      degree:
        - SE: "D"
          rationale: "Enhance an automated linter so that it is easily configurable."

- description: Run checks for Question 2 Part (d) with 'execexam' command and confirm correct exit code
  command: poetry run execexam . tests/ --mark "question_two_part_d" --no-fancy --report status --report trace --report failure --report setup --report code
  objectives:
    CLO1:
      degree:
        - SE: "D"
          rationale: "Enhance an automated linter so that produces easy-to-understand output."

# Question 3

- description: Run checks for Question 3 Part (a) with 'execexam' command and confirm correct exit code
  command: poetry run execexam . tests/ --mark "question_three_part_a" --no-fancy --report status --report trace --report failure --report setup --report code
  objectives:
    CLO4:
      degree:
        - SE: "D"
          rationale: "Implement functions to perform the automated mutation testing of a Python program."

- description: Run checks for Question 3 Part (b) with 'execexam' command and confirm correct exit code
  command: poetry run execexam . tests/ --mark "question_three_part_b" --no-fancy --report status --report trace --report failure --report setup --report code
  objectives:
    CLO2:
      degree:
        - SE: "D"
          rationale: "Implement domain-specific approaches to determining character string equality."

- description: Run checks for Question 3 Part (c) with 'execexam' command and confirm correct exit code
  command: poetry run execexam . tests/ --mark "question_three_part_c" --no-fancy --report status --report trace --report failure --report setup --report code
  objectives:
    CLO1:
      degree:
        - SE: "D"
          rationale: "Enhance a string equality function so that it is general-purpose and easy to maintain."

- description: Run checks for Question 3 Part (d) with 'execexam' command and confirm correct exit code
  command: poetry run execexam . tests/ --mark "question_three_part_d" --no-fancy --report status --report trace --report failure --report setup --report code
  objectives:
    CLO4:
      degree:
        - SE: "D"
          rationale: "Implement a function that can perform automated fuzzing through input generation."

# Question 4

- description: Run checks for Question 4 Part (a) with 'execexam' command and confirm correct exit code
  command: poetry run execexam . tests/ --mark "question_four_part_a" --no-fancy --report status --report trace --report failure --report setup --report code
  objectives:
    CLO2:
      degree:
        - SE: "D"
          rationale: "Implement an approach to determining if functions are approved after code review."

- description: Run checks for Question 4 Part (b) with 'execexam' command and confirm correct exit code
  command: poetry run execexam . tests/ --mark "question_four_part_b" --no-fancy --report status --report trace --report failure --report setup --report code
  objectives:
    CLO2:
      degree:
        - SE: "D"
          rationale: "Implement functions to determine if a module looks good to merge after code review."

- description: Run checks for Question 4 Part (c) with 'execexam' command and confirm correct exit code
  command: poetry run execexam . tests/ --mark "question_four_part_c" --no-fancy --report status --report trace --report failure --report setup --report code
  objectives:
    CLO4:
      degree:
        - SE: "D"
          rationale: "Extract details (e.g., mix, max, avg) about the cyclomatic complexity of functions."

- description: Run checks for Question 4 Part (d) with 'execexam' command and confirm correct exit code
  command: poetry run execexam . tests/ --mark "question_four_part_d" --no-fancy --report status --report trace --report failure --report setup --report code
  objectives:
    CLO2:
      degree:
        - SE: "D"
          rationale: "Determine whether or not it is acceptable to merge a pull request based on complexity."

# }}}

# Program Analysis with Software Engineering Tools {{{

# Question 1

# run a command: ruff check with default settings found in .ruff.toml file
- description: Ensure that Question 1 follows industry-standard rules using the command 'ruff check'
  command: poetry run ruff check questions/question_one.py
  objectives:
    CLO1:
      degree:
        - SE: "D"
          rationale: "Ensure that a software system is maintainable because it adheres to linting rules."

# run a command: ruff format with default settings found in .ruff.toml file
- description: Ensure that Question 1 adheres to an industry-standard format using the command 'ruff format'
  command: poetry run ruff format questions/question_one.py --check
  objectives:
    CLO1:
      degree:
        - SE: "D"
          rationale: "Ensure that a software system is maintainable because it is formatted correctly."

# run a command: mypy with the default settings to confirm type alignment for all functions
- description: Ensure that Question 1 has correct type annotations using the command 'mypy'
  command: poetry run mypy questions/question_one.py
  objectives:
    CLO2:
      degree:
        - SE: "D"
          rationale: "Confirm that a Python program meets a domain's standards for type annotations."

# run symbex: count functions with full type annotations
- description: Ensure that Question 1 has correct number of fully type annotated functions using the command 'symbex'
  check: MatchCommandFragment
  options:
    command: "poetry run symbex -s --fully-typed -f questions/question_one.py --count"
    fragment: 6
    count: 1
    exact: true
  objectives:
    CLO2:
      degree:
        - SE: "D"
          rationale: "Confirm that a Python program meets a domain's standards for type annotations."

# run symbex: count functions with docstring-based documentation (note: does not count module docstring)
- description: Ensure that Question 1 has correct number of documented functions using the command 'symbex'
  check: MatchCommandFragment
  options:
    command: "poetry run symbex -s --documented -f questions/question_one.py --count"
    fragment: 8
    count: 1
    exact: true
  objectives:
    CLO1:
      degree:
        - SE: "D"
          rationale: "Confirm that a Python program is maintainable because it uses correct docstrings."

# run symbex: confirm that there are no functions that are undocumented (i.e., do not have a docstring)
- description: Ensure that Question 1 has no undocumented functions using the command 'symbex'
  check: MatchCommandFragment
  options:
    command: "poetry run symbex -s --undocumented -f questions/question_one.py --count"
    fragment: 0
    count: 1
    exact: true
  objectives:
    CLO1:
      degree:
        - SE: "D"
          rationale: "Confirm that a Python program is maintainable because all functions have docstrings."

# Question 2

# run a command: ruff check with default settings found in .ruff.toml file
- description: Ensure that Question 2 follows industry-standard rules using the command 'ruff check'
  command: poetry run ruff check questions/question_two.py
  objectives:
    CLO1:
      degree:
        - SE: "D"
          rationale: "Ensure that a software system is maintainable because it adheres to linting rules."

# run a command: ruff format with default settings found in .ruff.toml file
- description: Ensure that Question 2 adheres to an industry-standard format using the command 'ruff format'
  command: poetry run ruff format questions/question_two.py --check
  objectives:
    CLO1:
      degree:
        - SE: "D"
          rationale: "Ensure that a software system is maintainable because it is formatted correctly."

# run a command: mypy with the default settings to confirm type alignment for all functions
- description: Ensure that Question 2 has correct type annotations using the command 'mypy'
  command: poetry run mypy questions/question_two.py
  objectives:
    CLO2:
      degree:
        - SE: "D"
          rationale: "Confirm that a Python program meets a domain's standards for type annotations."

# run symbex: count functions with full type annotations
- description: Ensure that Question 2 has correct number of fully type annotated functions using the command 'symbex'
  check: MatchCommandFragment
  options:
    command: "poetry run symbex -s --fully-typed -f questions/question_two.py --count"
    fragment: 9
    count: 1
    exact: true
  objectives:
    CLO2:
      degree:
        - SE: "D"
          rationale: "Confirm that a Python program meets a domain's standards for type annotations."

# run symbex: count functions with docstring-based documentation (note: does not count module docstring)
- description: Ensure that Question 2 has correct number of documented functions using the command 'symbex'
  check: MatchCommandFragment
  options:
    command: "poetry run symbex -s --documented -f questions/question_two.py --count"
    fragment: 9
    count: 1
    exact: true
  objectives:
    CLO1:
      degree:
        - SE: "D"
          rationale: "Confirm that a Python program is maintainable because it uses correct docstrings."

# run symbex: confirm that there are no functions that are undocumented (i.e., do not have a docstring)
- description: Ensure that Question 2 has no undocumented functions using the command 'symbex'
  check: MatchCommandFragment
  options:
    command: "poetry run symbex -s --undocumented -f questions/question_two.py --count"
    fragment: 0
    count: 1
    exact: true
  objectives:
    CLO1:
      degree:
        - SE: "D"
          rationale: "Confirm that a Python program is maintainable because all functions have docstrings."

# Question 3

# run a command: ruff check with default settings found in .ruff.toml file
- description: Ensure that Question 3 follows industry-standard rules using the command 'ruff check'
  command: poetry run ruff check questions/question_three.py
  objectives:
    CLO1:
      degree:
        - SE: "D"
          rationale: "Ensure that a software system is maintainable because it adheres to linting rules."

# run a command: ruff format with default settings found in .ruff.toml file
- description: Ensure that Question 3 adheres to an industry-standard format using the command 'ruff format'
  command: poetry run ruff format questions/question_three.py --check
  objectives:
    CLO1:
      degree:
        - SE: "D"
          rationale: "Ensure that a software system is maintainable because it is formatted correctly."

# run a command: mypy with the default settings to confirm type alignment for all functions
- description: Ensure that Question 3 has correct type annotations using the command 'mypy'
  command: poetry run mypy questions/question_three.py
  objectives:
    CLO2:
      degree:
        - SE: "D"
          rationale: "Confirm that a Python program meets a domain's standards for type annotations."

# run symbex: count functions with full type annotations
- description: Ensure that Question 3 has correct number of fully type annotated functions using the command 'symbex'
  check: MatchCommandFragment
  options:
    command: "poetry run symbex -s --fully-typed -f questions/question_three.py --count"
    fragment: 8
    count: 1
    exact: true
  objectives:
    CLO2:
      degree:
        - SE: "D"
          rationale: "Confirm that a Python program meets a domain's standards for type annotations."

# run symbex: count functions with docstring-based documentation (note: does not count module docstring)
- description: Ensure that Question 3 has correct number of documented functions using the command 'symbex'
  check: MatchCommandFragment
  options:
    command: "poetry run symbex -s --documented -f questions/question_three.py --count"
    fragment: 8
    count: 1
    exact: true
  objectives:
    CLO1:
      degree:
        - SE: "D"
          rationale: "Confirm that a Python program is maintainable because it uses correct docstrings."

# run symbex: confirm that there are no functions that are undocumented (i.e., do not have a docstring)
- description: Ensure that Question 3 has no undocumented functions using the command 'symbex'
  check: MatchCommandFragment
  options:
    command: "poetry run symbex -s --undocumented -f questions/question_three.py --count"
    fragment: 0
    count: 1
    exact: true
  objectives:
    CLO1:
      degree:
        - SE: "D"
          rationale: "Confirm that a Python program is maintainable because all functions have docstrings."

# Question 4

# run a command: ruff check with default settings found in .ruff.toml file
- description: Ensure that Question 4 follows industry-standard rules using the command 'ruff check'
  command: poetry run ruff check questions/question_four.py
  objectives:
    CLO1:
      degree:
        - SE: "D"
          rationale: "Ensure that a software system is maintainable because it adheres to linting rules."

# run a command: ruff format with default settings found in .ruff.toml file
- description: Ensure that Question 4 adheres to an industry-standard format using the command 'ruff format'
  command: poetry run ruff format questions/question_four.py --check
  objectives:
    CLO1:
      degree:
        - SE: "D"
          rationale: "Ensure that a software system is maintainable because it is formatted correctly."

# run a command: mypy with the default settings to confirm type alignment for all functions
- description: Ensure that Question 4 has correct type annotations using the command 'mypy'
  command: poetry run mypy questions/question_four.py
  objectives:
    CLO2:
      degree:
        - SE: "D"
          rationale: "Confirm that a Python program meets a domain's standards for type annotations."

# run symbex: count functions with full type annotations
- description: Ensure that Question 4 has correct number of fully type annotated functions using the command 'symbex'
  check: MatchCommandFragment
  options:
    command: "poetry run symbex -s --fully-typed -f questions/question_four.py --count"
    fragment: 7
    count: 1
    exact: true
  objectives:
    CLO2:
      degree:
        - SE: "D"
          rationale: "Confirm that a Python program meets a domain's standards for type annotations."

# run symbex: count functions with docstring-based documentation (note: does not count module docstring)
- description: Ensure that Question 4 has correct number of documented functions using the command 'symbex'
  check: MatchCommandFragment
  options:
    command: "poetry run symbex -s --documented -f questions/question_four.py --count"
    fragment: 9
    count: 1
    exact: true
  objectives:
    CLO1:
      degree:
        - SE: "D"
          rationale: "Confirm that a Python program is maintainable because it uses correct docstrings."

# run symbex: confirm that there are no functions that are undocumented (i.e., do not have a docstring)
- description: Ensure that Question 4 has no undocumented functions using the command 'symbex'
  check: MatchCommandFragment
  options:
    command: "poetry run symbex -s --undocumented -f questions/question_four.py --count"
    fragment: 0
    count: 1
    exact: true
  objectives:
    CLO1:
      degree:
        - SE: "D"
          rationale: "Confirm that a Python program is maintainable because all functions have docstrings."


# }}}
